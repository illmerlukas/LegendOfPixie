//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/TheGame/inputs/DialogsInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DialogsInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DialogsInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DialogsInputActions"",
    ""maps"": [
        {
            ""name"": ""Dialog"",
            ""id"": ""5b3bc4e0-5b68-4f40-88be-9eb4917903f9"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""07d9f19b-9f78-4fe6-be32-11ac726f114a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenStartMenu"",
                    ""type"": ""Button"",
                    ""id"": ""207cbacd-2a71-4939-aae0-a63bf0590f1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8741091b-88ee-463e-82ea-c62cb416f8fc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c00d186-5ccc-43df-b31a-b96ac1594124"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""554fc10b-fddb-4de4-b299-7b9cc1b8e5e4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenStartMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88218a8e-5dbe-41d0-b132-29a74d2073fe"",
                    ""path"": ""<DualShockGamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenStartMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dialog
        m_Dialog = asset.FindActionMap("Dialog", throwIfNotFound: true);
        m_Dialog_Restart = m_Dialog.FindAction("Restart", throwIfNotFound: true);
        m_Dialog_OpenStartMenu = m_Dialog.FindAction("OpenStartMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dialog
    private readonly InputActionMap m_Dialog;
    private IDialogActions m_DialogActionsCallbackInterface;
    private readonly InputAction m_Dialog_Restart;
    private readonly InputAction m_Dialog_OpenStartMenu;
    public struct DialogActions
    {
        private @DialogsInputActions m_Wrapper;
        public DialogActions(@DialogsInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_Dialog_Restart;
        public InputAction @OpenStartMenu => m_Wrapper.m_Dialog_OpenStartMenu;
        public InputActionMap Get() { return m_Wrapper.m_Dialog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogActions set) { return set.Get(); }
        public void SetCallbacks(IDialogActions instance)
        {
            if (m_Wrapper.m_DialogActionsCallbackInterface != null)
            {
                @Restart.started -= m_Wrapper.m_DialogActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_DialogActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_DialogActionsCallbackInterface.OnRestart;
                @OpenStartMenu.started -= m_Wrapper.m_DialogActionsCallbackInterface.OnOpenStartMenu;
                @OpenStartMenu.performed -= m_Wrapper.m_DialogActionsCallbackInterface.OnOpenStartMenu;
                @OpenStartMenu.canceled -= m_Wrapper.m_DialogActionsCallbackInterface.OnOpenStartMenu;
            }
            m_Wrapper.m_DialogActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @OpenStartMenu.started += instance.OnOpenStartMenu;
                @OpenStartMenu.performed += instance.OnOpenStartMenu;
                @OpenStartMenu.canceled += instance.OnOpenStartMenu;
            }
        }
    }
    public DialogActions @Dialog => new DialogActions(this);
    public interface IDialogActions
    {
        void OnRestart(InputAction.CallbackContext context);
        void OnOpenStartMenu(InputAction.CallbackContext context);
    }
}
